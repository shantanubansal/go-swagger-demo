// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/shantanubansal/go-swagger-demo/3.0/gen/restapi/operations/v1"
)

// V1AuthenticateHandlerFunc turns a function with the right signature into a v1 authenticate handler
type V1AuthenticateHandlerFunc func(V1AuthenticateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn V1AuthenticateHandlerFunc) Handle(params V1AuthenticateParams) middleware.Responder {
	return fn(params)
}

// V1AuthenticateHandler interface for that can handle valid v1 authenticate params
type V1AuthenticateHandler interface {
	Handle(V1AuthenticateParams) middleware.Responder
}

// NewV1Authenticate creates a new http.Handler for the v1 authenticate operation
func NewV1Authenticate(ctx *middleware.Context, handler V1AuthenticateHandler) *V1Authenticate {
	return &V1Authenticate{Context: ctx, Handler: handler}
}

/*V1Authenticate swagger:route POST /v1/authenticate v1 v1Authenticate

Authenticates the user for the specified credentials

Authenticates the user

*/
type V1Authenticate struct {
	Context *middleware.Context
	Handler V1AuthenticateHandler
}

func (o *V1Authenticate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewV1AuthenticateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/shantanubansal/go-swagger-demo/3.0/gen/restapi/operations/v1"
)

// V1UserInfoHandlerFunc turns a function with the right signature into a v1 user info handler
type V1UserInfoHandlerFunc func(V1UserInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn V1UserInfoHandlerFunc) Handle(params V1UserInfoParams) middleware.Responder {
	return fn(params)
}

// V1UserInfoHandler interface for that can handle valid v1 user info params
type V1UserInfoHandler interface {
	Handle(V1UserInfoParams) middleware.Responder
}

// NewV1UserInfo creates a new http.Handler for the v1 user info operation
func NewV1UserInfo(ctx *middleware.Context, handler V1UserInfoHandler) *V1UserInfo {
	return &V1UserInfo{Context: ctx, Handler: handler}
}

/*V1UserInfo swagger:route GET /v1/userinfo v1 v1UserInfo

Returns the userinfo

Authenticates the user

*/
type V1UserInfo struct {
	Context *middleware.Context
	Handler V1UserInfoHandler
}

func (o *V1UserInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewV1UserInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

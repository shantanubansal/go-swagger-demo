// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/shantanubansal/go-swagger-demo/3.0/gen/restapi/operations/v1"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a Demo Project to demonstrate the usage of go-swagger with version",
    "title": "SwagApi",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/authenticate": {
      "post": {
        "description": "Authenticates the user",
        "tags": [
          "v1"
        ],
        "summary": "Authenticates the user for the specified credentials",
        "operationId": "v1Authenticate",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "setCookie",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      }
    },
    "/v1/cloudconfig/aws": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster cloud config",
        "operationId": "v1CloudConfigAws",
        "responses": {
          "200": {
            "description": "An spectro cluster cloudconfig",
            "schema": {
              "$ref": "#/definitions/v1EksCloudConfig"
            }
          }
        }
      }
    },
    "/v1/cluster/dashboard": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster summary",
        "operationId": "v1ClusterDashboard",
        "responses": {
          "200": {
            "description": "An spectro cluster summary",
            "schema": {
              "$ref": "#/definitions/v1ClusterSummary"
            }
          }
        }
      }
    },
    "/v1/cluster/events": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "v1ClusterEvents",
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1ClusterEvents"
            }
          }
        }
      }
    },
    "/v1/cluster/overview": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "v1ClusterOverview",
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1ClusterOverviewEntity"
            }
          }
        }
      }
    },
    "/v1/system/health/ping": {
      "get": {
        "description": "Ping Service",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Ping Service",
        "operationId": "V1SystemHealthPing",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SystemHealthPing"
            }
          }
        }
      }
    },
    "/v1/userinfo": {
      "get": {
        "description": "Authenticates the user",
        "tags": [
          "v1"
        ],
        "summary": "Returns the userinfo",
        "operationId": "v1UserInfo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserInfo"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "arrSpec": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "authType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "l1": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l2": {
          "$ref": "#/definitions/l2"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l2": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l3": {
          "$ref": "#/definitions/l3"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l3": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l4": {
          "$ref": "#/definitions/l4"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l4": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l5": {
          "$ref": "#/definitions/l5"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l5": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l6": {
          "$ref": "#/definitions/l6"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l6": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l7": {
          "$ref": "#/definitions/l7"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l7": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l8": {
          "$ref": "#/definitions/l8"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l8": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l7": {
          "$ref": "#/definitions/l8"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "metadata": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "age": {
          "type": "string"
        },
        "dob": {
          "$ref": "#/definitions/v1Time"
        },
        "l1": {
          "$ref": "#/definitions/l1"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "isLocked": {
          "type": "boolean"
        },
        "isOwner": {
          "type": "boolean"
        }
      }
    },
    "status": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastLogin": {
          "$ref": "#/definitions/v1Time"
        },
        "modificationTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ApiEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1AuthLogin": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "password"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1AwsMachine": {
      "description": "AWS cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1AwsMachineSpec": {
      "description": "AWS cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "vpcId",
        "ami"
      ],
      "properties": {
        "ami": {
          "type": "string"
        },
        "az": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "iamProfile": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsNic"
          }
        },
        "phase": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1AwsNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1CloudAccountMeta": {
      "description": "Cloud account meta information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1CloudConfigMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "machinePools": {
          "description": "Machine pool meta information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachinePoolMeta"
          }
        }
      }
    },
    "v1CloudCost": {
      "description": "Cloud cost information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudMachineStatus": {
      "description": "cloud machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1MachineHealth"
        },
        "instanceState": {
          "type": "string",
          "enum": [
            "Pending",
            "Provisioning",
            "Provisioned",
            "Running",
            "Deleting",
            "Deleted",
            "Failed",
            "Unknown"
          ]
        }
      }
    },
    "v1CloudType": {
      "type": "string",
      "default": "all",
      "enum": [
        "all",
        "aws",
        "azure",
        "gcp",
        "vsphere",
        "openstack",
        "maas",
        "nested",
        "baremetal",
        "eks",
        "aks",
        "edge",
        "edge-native",
        "libvirt",
        "tencent",
        "tke",
        "coxedge",
        "generic"
      ]
    },
    "v1ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterEvents": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Event"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ClusterImport": {
      "type": "object",
      "properties": {
        "importLink": {
          "description": "import link to download and install ally-lite, palette-lite",
          "type": "string"
        },
        "isBrownfield": {
          "description": "Deprecated. Use the 'spec.clusterType'",
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "description": "cluster import status",
          "type": "string"
        }
      }
    },
    "v1ClusterMetaSpecLocation": {
      "description": "Cluster location information",
      "type": "object",
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float64"
          }
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "regionCode": {
          "type": "string"
        },
        "regionName": {
          "type": "string"
        }
      }
    },
    "v1ClusterOverviewEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterPackManifestStatus": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterPackStatus": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackManifestStatus"
          }
        },
        "name": {
          "type": "string"
        },
        "profileUid": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "name": {
          "type": "string"
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "profileVersion": {
          "description": "version start from 1.0.0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "description": "Deprecated. Use profileVersion",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterProfileTemplateMeta": {
      "description": "Cluster profile template meta information",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "name": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "cloudaccount": {
              "$ref": "#/definitions/v1CloudAccountMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterUidStatusSummary"
        }
      }
    },
    "v1ComputeMetrics": {
      "description": "Compute metrics",
      "type": "object",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "limit": {
          "type": "number",
          "x-omitempty": false
        },
        "request": {
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "x-omitempty": false
        },
        "unit": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1EksAddon": {
      "description": "EksAddon represents a EKS addon",
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "conflictResolution": {
          "description": "ConflictResolution is used to declare what should happen if there are parameter conflicts.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the addon",
          "type": "string"
        },
        "serviceAccountRoleARN": {
          "description": "ServiceAccountRoleArn is the ARN of an IAM role to bind to the addons service account",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the addon to use",
          "type": "string"
        }
      }
    },
    "v1EksCloudConfig": {
      "description": "EksCloudConfig is the Schema for the ekscloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EksCloudConfigSpec"
        }
      }
    },
    "v1EksCloudConfigSpec": {
      "description": "EksCloudConfigSpec defines the cloud configuration input by user",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "fargateProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          }
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfig"
          }
        }
      }
    },
    "v1EksClusterConfig": {
      "description": "EksClusterConfig defines EKS specific config",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "addons": {
          "description": "Addons defines the EKS addons to enable with the EKS cluster. This may be required for brownfield clusters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksAddon"
          }
        },
        "bastionDisabled": {
          "description": "BastionDisabled is the option to disable bastion node",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "encryptionConfig": {
          "$ref": "#/definitions/v1EncryptionConfig"
        },
        "endpointAccess": {
          "$ref": "#/definitions/v1EksClusterConfigEndpointAccess"
        },
        "region": {
          "description": "The AWS Region the cluster lives in.",
          "type": "string"
        },
        "sshKeyName": {
          "description": "SSHKeyName specifies which EC2 SSH key can be used to access machines.",
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1EksClusterConfigEndpointAccess": {
      "description": "EndpointAccess specifies how control plane endpoints are accessible",
      "type": "object",
      "properties": {
        "private": {
          "description": "Private points VPC-internal control plane access to the private endpoint",
          "type": "boolean"
        },
        "public": {
          "description": "Public controls whether control plane endpoints are publicly accessible",
          "type": "boolean"
        },
        "publicCIDRs": {
          "description": "PublicCIDRs specifies which blocks can access the public endpoint",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EksMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "infraProfileRef": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsMachine"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotMarketOptions": {
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1EncryptionConfig": {
      "description": "EncryptionConfig specifies the encryption configuration for the EKS clsuter.",
      "type": "object",
      "properties": {
        "isEnabled": {
          "description": "Is encryption configuration enabled for the cluster",
          "type": "boolean"
        },
        "provider": {
          "description": "Provider specifies the ARN or alias of the CMK (in AWS KMS)",
          "type": "string"
        },
        "resources": {
          "description": "Resources specifies the resources to be encrypted",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Event": {
      "description": "Event information organized by tags",
      "type": "object",
      "properties": {
        "involvedObject": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "reason": {
          "type": "string"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "severity": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v1EventSource"
        }
      }
    },
    "v1EventSource": {
      "description": "Event source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "v1FargateProfile": {
      "description": "FargateProfile defines the desired state of FargateProfile",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "name specifies the profile name.",
          "type": "string"
        },
        "selectors": {
          "description": "Selectors specify fargate pod selectors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateSelector"
          }
        },
        "subnetIds": {
          "description": "SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1FargateSelector": {
      "description": "FargateSelector specifies a selector for pods that should run on this fargate pool",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "labels": {
          "description": "Labels specifies which pod labels this selector should match.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "description": "Namespace specifies which namespace this selector should match.",
          "type": "string"
        }
      }
    },
    "v1KubeMeta": {
      "description": "Spectro cluster kube meta",
      "type": "object",
      "properties": {
        "hasKubeConfig": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasKubeConfigClient": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasManifest": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kubernetesVersion": {
          "type": "string"
        }
      }
    },
    "v1ListMetaData": {
      "description": "ListMeta describes metadata for the resource listing",
      "type": "object",
      "properties": {
        "continue": {
          "description": "Next token for the pagination. Next token is equal to empty string indicates end of result set.",
          "type": "string",
          "x-omitempty": false
        },
        "count": {
          "description": "Total count of the resources which might change during pagination based on the resources addition or deletion",
          "type": "integer",
          "x-omitempty": false
        },
        "limit": {
          "description": "Number of records feteched",
          "type": "integer",
          "x-omitempty": false
        },
        "offset": {
          "description": "The next offset for the pagination. Starting index for which next request will be placed.",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1LoadBalancerService": {
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ServicePort"
          }
        }
      }
    },
    "v1MachineHealth": {
      "description": "Machine health state",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachineHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MachineHealthCondition": {
      "description": "Machine health condition",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1MachinePoolMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "healthy": {
          "description": "number of healthy machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "infraProfileTemplate": {
          "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1Nested": {
      "properties": {
        "hostCluster": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "nestedClusters": {
          "description": "list of nested clusters deployed on the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "state": {
          "description": "cluster nested host status",
          "type": "string"
        }
      }
    },
    "v1ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastModifiedTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1PackPreset": {
      "description": "PackPreset defines the preset pack values",
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string",
          "x-omitempty": false
        },
        "group": {
          "type": "string",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        }
      }
    },
    "v1PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "type": "object",
      "required": [
        "layer",
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "inValidReason": {
          "type": "string"
        },
        "isInvalid": {
          "description": "pack is invalid when the associated tag is deleted from the registry",
          "type": "boolean"
        },
        "layer": {
          "type": "string",
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ]
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "registryUid": {
          "description": "pack registry uid",
          "type": "string"
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "server": {
          "description": "pack registry server or helm repo",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "type": {
          "description": "type of the pack",
          "type": "string",
          "enum": [
            "spectro",
            "helm",
            "manifest"
          ]
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1PackSchema": {
      "description": "PackSchema defines the schema definition, hints for the pack values",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "x-omitempty": false
        },
        "hints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "listOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "readonly": {
          "type": "boolean",
          "x-omitempty": false
        },
        "regex": {
          "type": "string",
          "x-omitempty": false
        },
        "required": {
          "type": "boolean",
          "x-omitempty": false
        },
        "type": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1RelatedObject": {
      "description": "The object for which the event is related",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "spectrocluster",
            "machine",
            "cloudconfig",
            "clusterprofile",
            "pack"
          ]
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ResourceCost": {
      "description": "Resource Cost information",
      "type": "object",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1CloudCost"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceReference": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1SpcApply": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string",
          "enum": [
            "DownloadAndInstall",
            "DownloadAndInstallLater"
          ]
        },
        "canBeApplied": {
          "description": "If it is true then Agent can apply the changes to the palette",
          "type": "boolean",
          "x-omitempty": false
        },
        "lastModifiedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "patchAppliedTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SpectroClusterAddOnServiceSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthCondition": {
      "description": "Spectro cluster health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthStatus": {
      "description": "Spectro cluster health status",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterHealthCondition"
          }
        },
        "lastHeartBeatTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterMetrics": {
      "description": "Spectro cluster metrics",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1ComputeMetrics"
        },
        "memory": {
          "$ref": "#/definitions/v1ComputeMetrics"
        }
      }
    },
    "v1SpectroClusterUidStatusSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "addOnServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterAddOnServiceSummary"
          }
        },
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiEndpoint"
          }
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "hourlyRate": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "kubeMeta": {
          "$ref": "#/definitions/v1KubeMeta"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterMetaSpecLocation"
        },
        "metrics": {
          "$ref": "#/definitions/v1SpectroClusterMetrics"
        },
        "nested": {
          "$ref": "#/definitions/v1Nested"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "spcApply": {
          "$ref": "#/definitions/v1SpcApply"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        },
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        }
      }
    },
    "v1SpotMarketOptions": {
      "description": "SpotMarketOptions defines the options available to a user when configuring Machines to run on Spot instances. Most users should provide an empty struct.",
      "type": "object",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      }
    },
    "v1SystemHealthPing": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1Taint": {
      "description": "Taint",
      "type": "object",
      "properties": {
        "effect": {
          "type": "string",
          "enum": [
            "NoSchedule",
            "PreferNoSchedule",
            "NoExecute"
          ]
        },
        "key": {
          "description": "The taint key to be applied to a node",
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/v1Time"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      }
    },
    "v1Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1UpdateStrategy": {
      "description": "UpdatesStrategy will be used to translate to RollingUpdateStrategy of a MachineDeployment We'll start with default values for the translation, can expose more details later Following is details of parameters translated from the type ScaleOut =\u003e maxSurge=1, maxUnavailable=0 ScaleIn =\u003e maxSurge=0, maxUnavailable=1",
      "type": "object",
      "properties": {
        "type": {
          "description": "update strategy, either ScaleOut or ScaleIn if empty, will default to RollingUpdateScaleOut",
          "type": "string",
          "enum": [
            "RollingUpdateScaleOut",
            "RollingUpdateScaleIn"
          ]
        }
      }
    },
    "v1Upgrades": {
      "description": "Upgrades represent the reason of the last upgrade that took place",
      "type": "object",
      "properties": {
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1UserInfo": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/metadata"
        },
        "spec": {
          "$ref": "#/definitions/spec"
        },
        "status": {
          "$ref": "#/definitions/status"
        }
      }
    },
    "v1UserToken": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a Demo Project to demonstrate the usage of go-swagger with version",
    "title": "SwagApi",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/authenticate": {
      "post": {
        "description": "Authenticates the user",
        "tags": [
          "v1"
        ],
        "summary": "Authenticates the user for the specified credentials",
        "operationId": "v1Authenticate",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "setCookie",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      }
    },
    "/v1/cloudconfig/aws": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster cloud config",
        "operationId": "v1CloudConfigAws",
        "responses": {
          "200": {
            "description": "An spectro cluster cloudconfig",
            "schema": {
              "$ref": "#/definitions/v1EksCloudConfig"
            }
          }
        }
      }
    },
    "/v1/cluster/dashboard": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster summary",
        "operationId": "v1ClusterDashboard",
        "responses": {
          "200": {
            "description": "An spectro cluster summary",
            "schema": {
              "$ref": "#/definitions/v1ClusterSummary"
            }
          }
        }
      }
    },
    "/v1/cluster/events": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "v1ClusterEvents",
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1ClusterEvents"
            }
          }
        }
      }
    },
    "/v1/cluster/overview": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "v1ClusterOverview",
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1ClusterOverviewEntity"
            }
          }
        }
      }
    },
    "/v1/system/health/ping": {
      "get": {
        "description": "Ping Service",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Ping Service",
        "operationId": "V1SystemHealthPing",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SystemHealthPing"
            }
          }
        }
      }
    },
    "/v1/userinfo": {
      "get": {
        "description": "Authenticates the user",
        "tags": [
          "v1"
        ],
        "summary": "Returns the userinfo",
        "operationId": "v1UserInfo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserInfo"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "V1ClusterSummarySpec": {
      "description": "Spectro cluster spec summary",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1CloudConfigMeta"
        },
        "cloudaccount": {
          "$ref": "#/definitions/v1CloudAccountMeta"
        },
        "clusterProfileTemplate": {
          "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
        },
        "clusterProfileTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
          }
        }
      }
    },
    "arrSpec": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "authType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "l1": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l2": {
          "$ref": "#/definitions/l2"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l2": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l3": {
          "$ref": "#/definitions/l3"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l3": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l4": {
          "$ref": "#/definitions/l4"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l4": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l5": {
          "$ref": "#/definitions/l5"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l5": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l6": {
          "$ref": "#/definitions/l6"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l6": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l7": {
          "$ref": "#/definitions/l7"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l7": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l8": {
          "$ref": "#/definitions/l8"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "l8": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "arr": {
          "$ref": "#/definitions/arrSpec"
        },
        "l7": {
          "$ref": "#/definitions/l8"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "metadata": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "age": {
          "type": "string"
        },
        "dob": {
          "$ref": "#/definitions/v1Time"
        },
        "l1": {
          "$ref": "#/definitions/l1"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "isLocked": {
          "type": "boolean"
        },
        "isOwner": {
          "type": "boolean"
        }
      }
    },
    "status": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastLogin": {
          "$ref": "#/definitions/v1Time"
        },
        "modificationTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ApiEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1AuthLogin": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "password"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1AwsMachine": {
      "description": "AWS cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1AwsMachineSpec": {
      "description": "AWS cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "vpcId",
        "ami"
      ],
      "properties": {
        "ami": {
          "type": "string"
        },
        "az": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "iamProfile": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsNic"
          }
        },
        "phase": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1AwsNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1CloudAccountMeta": {
      "description": "Cloud account meta information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1CloudConfigMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "machinePools": {
          "description": "Machine pool meta information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachinePoolMeta"
          }
        }
      }
    },
    "v1CloudCost": {
      "description": "Cloud cost information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudMachineStatus": {
      "description": "cloud machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1MachineHealth"
        },
        "instanceState": {
          "type": "string",
          "enum": [
            "Pending",
            "Provisioning",
            "Provisioned",
            "Running",
            "Deleting",
            "Deleted",
            "Failed",
            "Unknown"
          ]
        }
      }
    },
    "v1CloudType": {
      "type": "string",
      "default": "all",
      "enum": [
        "all",
        "aws",
        "azure",
        "gcp",
        "vsphere",
        "openstack",
        "maas",
        "nested",
        "baremetal",
        "eks",
        "aks",
        "edge",
        "edge-native",
        "libvirt",
        "tencent",
        "tke",
        "coxedge",
        "generic"
      ]
    },
    "v1ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterEvents": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Event"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ClusterImport": {
      "type": "object",
      "properties": {
        "importLink": {
          "description": "import link to download and install ally-lite, palette-lite",
          "type": "string"
        },
        "isBrownfield": {
          "description": "Deprecated. Use the 'spec.clusterType'",
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "description": "cluster import status",
          "type": "string"
        }
      }
    },
    "v1ClusterMetaSpecLocation": {
      "description": "Cluster location information",
      "type": "object",
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float64"
          }
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "regionCode": {
          "type": "string"
        },
        "regionName": {
          "type": "string"
        }
      }
    },
    "v1ClusterOverviewEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterPackManifestStatus": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterPackStatus": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackManifestStatus"
          }
        },
        "name": {
          "type": "string"
        },
        "profileUid": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "name": {
          "type": "string"
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "profileVersion": {
          "description": "version start from 1.0.0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "description": "Deprecated. Use profileVersion",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterProfileTemplateMeta": {
      "description": "Cluster profile template meta information",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "name": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "cloudaccount": {
              "$ref": "#/definitions/v1CloudAccountMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterUidStatusSummary"
        }
      }
    },
    "v1ComputeMetrics": {
      "description": "Compute metrics",
      "type": "object",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "limit": {
          "type": "number",
          "x-omitempty": false
        },
        "request": {
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "x-omitempty": false
        },
        "unit": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1EksAddon": {
      "description": "EksAddon represents a EKS addon",
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "conflictResolution": {
          "description": "ConflictResolution is used to declare what should happen if there are parameter conflicts.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the addon",
          "type": "string"
        },
        "serviceAccountRoleARN": {
          "description": "ServiceAccountRoleArn is the ARN of an IAM role to bind to the addons service account",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the addon to use",
          "type": "string"
        }
      }
    },
    "v1EksCloudConfig": {
      "description": "EksCloudConfig is the Schema for the ekscloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EksCloudConfigSpec"
        }
      }
    },
    "v1EksCloudConfigSpec": {
      "description": "EksCloudConfigSpec defines the cloud configuration input by user",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "fargateProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          }
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfig"
          }
        }
      }
    },
    "v1EksClusterConfig": {
      "description": "EksClusterConfig defines EKS specific config",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "addons": {
          "description": "Addons defines the EKS addons to enable with the EKS cluster. This may be required for brownfield clusters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksAddon"
          }
        },
        "bastionDisabled": {
          "description": "BastionDisabled is the option to disable bastion node",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "encryptionConfig": {
          "$ref": "#/definitions/v1EncryptionConfig"
        },
        "endpointAccess": {
          "$ref": "#/definitions/v1EksClusterConfigEndpointAccess"
        },
        "region": {
          "description": "The AWS Region the cluster lives in.",
          "type": "string"
        },
        "sshKeyName": {
          "description": "SSHKeyName specifies which EC2 SSH key can be used to access machines.",
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1EksClusterConfigEndpointAccess": {
      "description": "EndpointAccess specifies how control plane endpoints are accessible",
      "type": "object",
      "properties": {
        "private": {
          "description": "Private points VPC-internal control plane access to the private endpoint",
          "type": "boolean"
        },
        "public": {
          "description": "Public controls whether control plane endpoints are publicly accessible",
          "type": "boolean"
        },
        "publicCIDRs": {
          "description": "PublicCIDRs specifies which blocks can access the public endpoint",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EksMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "infraProfileRef": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsMachine"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotMarketOptions": {
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1EncryptionConfig": {
      "description": "EncryptionConfig specifies the encryption configuration for the EKS clsuter.",
      "type": "object",
      "properties": {
        "isEnabled": {
          "description": "Is encryption configuration enabled for the cluster",
          "type": "boolean"
        },
        "provider": {
          "description": "Provider specifies the ARN or alias of the CMK (in AWS KMS)",
          "type": "string"
        },
        "resources": {
          "description": "Resources specifies the resources to be encrypted",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Event": {
      "description": "Event information organized by tags",
      "type": "object",
      "properties": {
        "involvedObject": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "reason": {
          "type": "string"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "severity": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v1EventSource"
        }
      }
    },
    "v1EventSource": {
      "description": "Event source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "v1FargateProfile": {
      "description": "FargateProfile defines the desired state of FargateProfile",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "name specifies the profile name.",
          "type": "string"
        },
        "selectors": {
          "description": "Selectors specify fargate pod selectors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateSelector"
          }
        },
        "subnetIds": {
          "description": "SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1FargateSelector": {
      "description": "FargateSelector specifies a selector for pods that should run on this fargate pool",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "labels": {
          "description": "Labels specifies which pod labels this selector should match.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "description": "Namespace specifies which namespace this selector should match.",
          "type": "string"
        }
      }
    },
    "v1KubeMeta": {
      "description": "Spectro cluster kube meta",
      "type": "object",
      "properties": {
        "hasKubeConfig": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasKubeConfigClient": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasManifest": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kubernetesVersion": {
          "type": "string"
        }
      }
    },
    "v1ListMetaData": {
      "description": "ListMeta describes metadata for the resource listing",
      "type": "object",
      "properties": {
        "continue": {
          "description": "Next token for the pagination. Next token is equal to empty string indicates end of result set.",
          "type": "string",
          "x-omitempty": false
        },
        "count": {
          "description": "Total count of the resources which might change during pagination based on the resources addition or deletion",
          "type": "integer",
          "x-omitempty": false
        },
        "limit": {
          "description": "Number of records feteched",
          "type": "integer",
          "x-omitempty": false
        },
        "offset": {
          "description": "The next offset for the pagination. Starting index for which next request will be placed.",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1LoadBalancerService": {
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ServicePort"
          }
        }
      }
    },
    "v1MachineHealth": {
      "description": "Machine health state",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachineHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MachineHealthCondition": {
      "description": "Machine health condition",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1MachinePoolMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "healthy": {
          "description": "number of healthy machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "infraProfileTemplate": {
          "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1Nested": {
      "properties": {
        "hostCluster": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "nestedClusters": {
          "description": "list of nested clusters deployed on the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "state": {
          "description": "cluster nested host status",
          "type": "string"
        }
      }
    },
    "v1ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastModifiedTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1PackPreset": {
      "description": "PackPreset defines the preset pack values",
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string",
          "x-omitempty": false
        },
        "group": {
          "type": "string",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        }
      }
    },
    "v1PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "type": "object",
      "required": [
        "layer",
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "inValidReason": {
          "type": "string"
        },
        "isInvalid": {
          "description": "pack is invalid when the associated tag is deleted from the registry",
          "type": "boolean"
        },
        "layer": {
          "type": "string",
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ]
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "registryUid": {
          "description": "pack registry uid",
          "type": "string"
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "server": {
          "description": "pack registry server or helm repo",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "type": {
          "description": "type of the pack",
          "type": "string",
          "enum": [
            "spectro",
            "helm",
            "manifest"
          ]
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1PackSchema": {
      "description": "PackSchema defines the schema definition, hints for the pack values",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "x-omitempty": false
        },
        "hints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "listOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "readonly": {
          "type": "boolean",
          "x-omitempty": false
        },
        "regex": {
          "type": "string",
          "x-omitempty": false
        },
        "required": {
          "type": "boolean",
          "x-omitempty": false
        },
        "type": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1RelatedObject": {
      "description": "The object for which the event is related",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "spectrocluster",
            "machine",
            "cloudconfig",
            "clusterprofile",
            "pack"
          ]
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ResourceCost": {
      "description": "Resource Cost information",
      "type": "object",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1CloudCost"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceReference": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1SpcApply": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string",
          "enum": [
            "DownloadAndInstall",
            "DownloadAndInstallLater"
          ]
        },
        "canBeApplied": {
          "description": "If it is true then Agent can apply the changes to the palette",
          "type": "boolean",
          "x-omitempty": false
        },
        "lastModifiedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "patchAppliedTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SpectroClusterAddOnServiceSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthCondition": {
      "description": "Spectro cluster health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthStatus": {
      "description": "Spectro cluster health status",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterHealthCondition"
          }
        },
        "lastHeartBeatTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterMetrics": {
      "description": "Spectro cluster metrics",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1ComputeMetrics"
        },
        "memory": {
          "$ref": "#/definitions/v1ComputeMetrics"
        }
      }
    },
    "v1SpectroClusterUidStatusSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "addOnServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterAddOnServiceSummary"
          }
        },
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApiEndpoint"
          }
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "hourlyRate": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "kubeMeta": {
          "$ref": "#/definitions/v1KubeMeta"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterMetaSpecLocation"
        },
        "metrics": {
          "$ref": "#/definitions/v1SpectroClusterMetrics"
        },
        "nested": {
          "$ref": "#/definitions/v1Nested"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "spcApply": {
          "$ref": "#/definitions/v1SpcApply"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        },
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        }
      }
    },
    "v1SpotMarketOptions": {
      "description": "SpotMarketOptions defines the options available to a user when configuring Machines to run on Spot instances. Most users should provide an empty struct.",
      "type": "object",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      }
    },
    "v1SystemHealthPing": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1Taint": {
      "description": "Taint",
      "type": "object",
      "properties": {
        "effect": {
          "type": "string",
          "enum": [
            "NoSchedule",
            "PreferNoSchedule",
            "NoExecute"
          ]
        },
        "key": {
          "description": "The taint key to be applied to a node",
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/v1Time"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      }
    },
    "v1Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1UpdateStrategy": {
      "description": "UpdatesStrategy will be used to translate to RollingUpdateStrategy of a MachineDeployment We'll start with default values for the translation, can expose more details later Following is details of parameters translated from the type ScaleOut =\u003e maxSurge=1, maxUnavailable=0 ScaleIn =\u003e maxSurge=0, maxUnavailable=1",
      "type": "object",
      "properties": {
        "type": {
          "description": "update strategy, either ScaleOut or ScaleIn if empty, will default to RollingUpdateScaleOut",
          "type": "string",
          "enum": [
            "RollingUpdateScaleOut",
            "RollingUpdateScaleIn"
          ]
        }
      }
    },
    "v1Upgrades": {
      "description": "Upgrades represent the reason of the last upgrade that took place",
      "type": "object",
      "properties": {
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1UserInfo": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/metadata"
        },
        "spec": {
          "$ref": "#/definitions/spec"
        },
        "status": {
          "$ref": "#/definitions/status"
        }
      }
    },
    "v1UserToken": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string"
        }
      }
    }
  }
}`))
}

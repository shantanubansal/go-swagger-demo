// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// L5 Auth token response
//
// swagger:model l5
type L5 struct {

	// arr
	Arr *ArrSpec `json:"arr,omitempty"`

	// l6
	L6 *L6 `json:"l6,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this l5
func (m *L5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateL6(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *L5) validateArr(formats strfmt.Registry) error {
	if swag.IsZero(m.Arr) { // not required
		return nil
	}

	if m.Arr != nil {
		if err := m.Arr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arr")
			}
			return err
		}
	}

	return nil
}

func (m *L5) validateL6(formats strfmt.Registry) error {
	if swag.IsZero(m.L6) { // not required
		return nil
	}

	if m.L6 != nil {
		if err := m.L6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("l6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("l6")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this l5 based on the context it is used
func (m *L5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateL6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *L5) contextValidateArr(ctx context.Context, formats strfmt.Registry) error {

	if m.Arr != nil {
		if err := m.Arr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arr")
			}
			return err
		}
	}

	return nil
}

func (m *L5) contextValidateL6(ctx context.Context, formats strfmt.Registry) error {

	if m.L6 != nil {
		if err := m.L6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("l6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("l6")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *L5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *L5) UnmarshalBinary(b []byte) error {
	var res L5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
